

import java.awt.Image;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



/**
 *
 * @author edward
 */
public class GUI extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 5593245949972329908L;
	/**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ButtonPanel = new javax.swing.JPanel();
        Start = new javax.swing.JButton();
        Stop = new javax.swing.JButton();
        Slomo = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        Generate = new javax.swing.JButton();
        SimWindow = new Simulation(SimWidth,SimLength);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Woods Simulator");
        setMaximumSize(new java.awt.Dimension(1316, 684));
        setResizable(false);

        Start.setText("Start");
        Start.setToolTipText("Start the Simulation");
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });

        Stop.setText("Stop");
        Stop.setToolTipText("Stop the Simulation");
        Stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopActionPerformed(evt);
            }
        });

        Slomo.setText("Slomo");
        Slomo.setToolTipText("Bring up the Slomo Window");
        Slomo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SlomoActionPerformed(evt);
            }
        });

        Reset.setText("Reset");
        Reset.setToolTipText("Reset the simulation back to default");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        Generate.setText("Generate");
        Generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ButtonPanelLayout = new javax.swing.GroupLayout(ButtonPanel);
        ButtonPanel.setLayout(ButtonPanelLayout);
        ButtonPanelLayout.setHorizontalGroup(
            ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPanelLayout.createSequentialGroup()
                .addGroup(ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Start, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Stop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Slomo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Reset, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(ButtonPanelLayout.createSequentialGroup()
                        .addComponent(Generate)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ButtonPanelLayout.setVerticalGroup(
            ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Start, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Stop, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Slomo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Generate, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(134, Short.MAX_VALUE))
        );

        //SimWindow.setPreferredSize(new java.awt.Dimension(1192, 600));
        SimWindow.setPreferredSize(SimWindow.getPreferredSize());
        //SimWindow.setSize(new java.awt.Dimension(1192, 600));
        SimWindow.setSize(SimWindow.getPreferredSize());

        javax.swing.GroupLayout SimWindowLayout = new javax.swing.GroupLayout(SimWindow);
        SimWindow.setLayout(SimWindowLayout);
        SimWindowLayout.setHorizontalGroup(
            SimWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1181, Short.MAX_VALUE)
        );
        SimWindowLayout.setVerticalGroup(
            SimWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SimWindow, javax.swing.GroupLayout.DEFAULT_SIZE, 1181, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(ButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SimWindow, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                    .addComponent(ButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
    	if(this.GrdLvl <= 2){
            theCore = new Core(this.k2OptMenu,this.GrdLvl);
            for(int i = 0; i < this.k2OptMenu.getTimes(); i++) {
        			stacks = theCore.startApp();
                    SimWindow.modifyTileImg(theCore.spectator().get(0).position.x, theCore.spectator().get(0).position.y, 0, 0);
                    stacks.setCharacter(1, char1);
                    SimWindow.modifyTileImg(theCore.spectator().get(1).position.x, theCore.spectator().get(1).position.y, 20, 20);
                    stacks.setCharacter(2, char2);
            }
        } else if(this.GrdLvl > 2 && this.GrdLvl <= 5){
            theCore = new Core(this.optMenu,this.GrdLvl);
            for(int i = 0; i < this.optMenu.getTimes(); i++) {
            	if(this.GrdLvl > 2 && this.GrdLvl <= 5){
            		if(optMenu.getPlayers() == 2) {
            	    	if (JOptionPane.showConfirmDialog(this, "Would you like to place the locations of each character?", "Place Characters?",
            	    	JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            	    	   SelectionWindow sw = new SelectionWindow();
            	    	   sw.setVisible(true);
            	    	if(sw.isGo()) {
               			stacks = theCore.startApp();
                        SimWindow.modifyTileImg(theCore.spectator().get(0).position.x, theCore.spectator().get(0).position.y, sw.getPx1()-1, sw.getPy1()-1);
                        stacks.setCharacter(1, char1);
                        SimWindow.modifyTileImg(theCore.spectator().get(1).position.x, theCore.spectator().get(1).position.y, sw.getPx2()-1, sw.getPy2()-1);
                        stacks.setCharacter(2, char2);
                        sw.dispose();
            	    	   }
                        
            	    	} else {
                			stacks = theCore.startApp();
                            SimWindow.modifyTileImg(theCore.spectator().get(0).position.x, theCore.spectator().get(0).position.y, 0, 0);
                            stacks.setCharacter(1, char1);
                            SimWindow.modifyTileImg(theCore.spectator().get(1).position.x, theCore.spectator().get(1).position.y, optMenu.getWid()-1, optMenu.getLeng()-1);
                            stacks.setCharacter(2, char2);
            	    	}
                    } else if(optMenu.getPlayers() == 3) {
                    	if (JOptionPane.showConfirmDialog(this, "Would you like to place the locations of each character?", "Place Characters?",
                    	        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    	    SelectionWindow3 sw3 = new SelectionWindow3();
                    	    sw3.setVisible(true);
                    	    if(sw3.isGo()) {
                        	stacks = theCore.startApp();
                            SimWindow.modifyTileImg(theCore.spectator().get(0).position.x, theCore.spectator().get(0).position.y, sw3.getPx1()-1, sw3.getPy1()-1);
                            stacks.setCharacter(1, char1);
                            SimWindow.modifyTileImg(theCore.spectator().get(1).position.x, theCore.spectator().get(1).position.y, sw3.getPx2()-1, sw3.getPy2()-1);
                            stacks.setCharacter(2, char2);
                            SimWindow.modifyTileImg(theCore.spectator().get(2).position.x, theCore.spectator().get(2).position.y, sw3.getPx3()-1, sw3.getPy3()-1);
                            stacks.setCharacter(3, char3);
                            sw3.dispose();
                    	    }
                    	    
                    	} else {
                        	stacks = theCore.startApp();
                            SimWindow.modifyTileImg(theCore.spectator().get(0).position.x, theCore.spectator().get(0).position.y, 0, 0);
                            stacks.setCharacter(1, char1);
                            SimWindow.modifyTileImg(theCore.spectator().get(1).position.x, theCore.spectator().get(1).position.y, optMenu.getWid()-1, optMenu.getLeng()-1);
                            stacks.setCharacter(2, char2);
                            SimWindow.modifyTileImg(theCore.spectator().get(2).position.x, theCore.spectator().get(2).position.y, 0, optMenu.getLeng()-1);
                            stacks.setCharacter(3, char3);
                    	}
                    } else if(optMenu.getPlayers() == 4) {
                    	if (JOptionPane.showConfirmDialog(this, "Would you like to place the locations of each character?", "Place Characters?",
                    	        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    		SelectionWindow4 sw4 = new SelectionWindow4();
                    		sw4.setVisible(true);
                    		if(sw4.isGo()) {
                        	stacks = theCore.startApp();
                            SimWindow.modifyTileImg(theCore.spectator().get(0).position.x, theCore.spectator().get(0).position.y, sw4.getPx1()-1, sw4.getPy1()-1);
                            stacks.setCharacter(1, char1);
                            SimWindow.modifyTileImg(theCore.spectator().get(1).position.x, theCore.spectator().get(1).position.y, sw4.getPx2()-1, sw4.getPy2()-1);
                            stacks.setCharacter(2, char2);
                            SimWindow.modifyTileImg(theCore.spectator().get(2).position.x, theCore.spectator().get(2).position.y, sw4.getPx3()-1, sw4.getPy3()-1);
                            stacks.setCharacter(3, char3);
                            SimWindow.modifyTileImg(theCore.spectator().get(3).position.x, theCore.spectator().get(2).position.y, sw4.getPx4()-1, sw4.getPy4()-1);
                            stacks.setCharacter(4, char4);
                            sw4.dispose();
                    		}
                    		
                    	} else {
                        	stacks = theCore.startApp();
                            SimWindow.modifyTileImg(theCore.spectator().get(0).position.x, theCore.spectator().get(0).position.y, 0, 0);
                            stacks.setCharacter(1, char1);
                            SimWindow.modifyTileImg(theCore.spectator().get(1).position.x, theCore.spectator().get(1).position.y, optMenu.getWid()-1, optMenu.getLeng()-1);
                            stacks.setCharacter(2, char2);
                            SimWindow.modifyTileImg(theCore.spectator().get(2).position.x, theCore.spectator().get(2).position.y, 0, optMenu.getLeng()-1);
                            stacks.setCharacter(3, char3);
                            SimWindow.modifyTileImg(theCore.spectator().get(3).position.x, theCore.spectator().get(2).position.y, optMenu.getWid()-1, 0);
                            stacks.setCharacter(4, char4);
                    	}
                    }
                }
            }
        } else if(this.GrdLvl > 5 && this.GrdLvl <= 8){
            theCore = new Core(this.g68OptMenu,this.GrdLvl);
            for(int i = 0; i < this.g68OptMenu.getTimes(); i++) {
        		if(g68OptMenu.getPlayers() == 2) {
        	    	if (JOptionPane.showConfirmDialog(this, "Would you like to place the locations of each character?", "Place Characters?",
        	    	        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
         	    	   SelectionWindow sw = new SelectionWindow();
         	    	   sw.setVisible(true);
         	    	   if(sw.isGo()) {
            			stacks = theCore.startApp();
                     SimWindow.modifyTileImg(theCore.spectator().get(0).position.x, theCore.spectator().get(0).position.y, sw.getPx1()-1, sw.getPy1()-1);
                     stacks.setCharacter(1, char1);
                     SimWindow.modifyTileImg(theCore.spectator().get(1).position.x, theCore.spectator().get(1).position.y, sw.getPx2()-1, sw.getPy2()-1);
                     stacks.setCharacter(2, char2);
                     sw.dispose();
         	    	   }
         	    	  
        	    	} else {
            			stacks = theCore.startApp();
                        SimWindow.modifyTileImg(theCore.spectator().get(0).position.x, theCore.spectator().get(0).position.y, 0, 0);
                        stacks.setCharacter(1, char1);
                        SimWindow.modifyTileImg(theCore.spectator().get(1).position.x, theCore.spectator().get(1).position.y, g68OptMenu.getWid()-1, g68OptMenu.getLeng()-1);
                        stacks.setCharacter(2, char2);
        	    	}
                } else if(g68OptMenu.getPlayers() == 3) {
                	if (JOptionPane.showConfirmDialog(this, "Would you like to place the locations of each character?", "Place Characters?",
                	        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                	    SelectionWindow3 sw3 = new SelectionWindow3();
                	    sw3.setVisible(true);
                	    if(sw3.isGo()) {
                    	stacks = theCore.startApp();
                        SimWindow.modifyTileImg(theCore.spectator().get(0).position.x, theCore.spectator().get(0).position.y, sw3.getPx1()-1, sw3.getPy1()-1);
                        stacks.setCharacter(1, char1);
                        SimWindow.modifyTileImg(theCore.spectator().get(1).position.x, theCore.spectator().get(1).position.y, sw3.getPx2()-1, sw3.getPy2()-1);
                        stacks.setCharacter(2, char2);
                        SimWindow.modifyTileImg(theCore.spectator().get(2).position.x, theCore.spectator().get(2).position.y, sw3.getPx3()-1, sw3.getPy3()-1);
                        stacks.setCharacter(3, char3);
                        sw3.dispose();
                	    }
                	    
                	} else {
                    	stacks = theCore.startApp();
                        SimWindow.modifyTileImg(theCore.spectator().get(0).position.x, theCore.spectator().get(0).position.y, 0, 0);
                        stacks.setCharacter(1, char1);
                        SimWindow.modifyTileImg(theCore.spectator().get(1).position.x, theCore.spectator().get(1).position.y, g68OptMenu.getWid()-1, g68OptMenu.getLeng()-1);
                        stacks.setCharacter(2, char2);
                        SimWindow.modifyTileImg(theCore.spectator().get(2).position.x, theCore.spectator().get(2).position.y, 0, g68OptMenu.getLeng()-1);
                        stacks.setCharacter(3, char3);
                	}
                } else if(g68OptMenu.getPlayers() == 4) {
                	if (JOptionPane.showConfirmDialog(this, "Would you like to place the locations of each character?", "Place Characters?",
                	        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                		SelectionWindow4 sw4 = new SelectionWindow4();
                		sw4.setVisible(true);
                		if(sw4.isGo()) {
                    	stacks = theCore.startApp();
                        SimWindow.modifyTileImg(theCore.spectator().get(0).position.x, theCore.spectator().get(0).position.y, sw4.getPx1()-1, sw4.getPy1()-1);
                        stacks.setCharacter(1, char1);
                        SimWindow.modifyTileImg(theCore.spectator().get(1).position.x, theCore.spectator().get(1).position.y, sw4.getPx2()-1, sw4.getPy2()-1);
                        stacks.setCharacter(2, char2);
                        SimWindow.modifyTileImg(theCore.spectator().get(2).position.x, theCore.spectator().get(2).position.y, sw4.getPx3()-1, sw4.getPy3()-1);
                        stacks.setCharacter(3, char3);
                        SimWindow.modifyTileImg(theCore.spectator().get(3).position.x, theCore.spectator().get(2).position.y, sw4.getPx4()-1, sw4.getPy4()-1);
                        stacks.setCharacter(4, char4);
                        sw4.dispose();
                		}
                		
                	} else {
                    	stacks = theCore.startApp();
                        SimWindow.modifyTileImg(theCore.spectator().get(0).position.x, theCore.spectator().get(0).position.y, 0, 0);
                        stacks.setCharacter(1, char1);
                        SimWindow.modifyTileImg(theCore.spectator().get(1).position.x, theCore.spectator().get(1).position.y, g68OptMenu.getWid()-1, g68OptMenu.getLeng()-1);
                        stacks.setCharacter(2, char2);
                        SimWindow.modifyTileImg(theCore.spectator().get(2).position.x, theCore.spectator().get(2).position.y, 0, g68OptMenu.getLeng()-1);
                        stacks.setCharacter(3, char3);
                        SimWindow.modifyTileImg(theCore.spectator().get(3).position.x, theCore.spectator().get(2).position.y, g68OptMenu.getWid()-1, 0);
                        stacks.setCharacter(4, char4);
                	}
                }
            }
        }
    }//GEN-LAST:event_StartActionPerformed

    private void SlomoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SlomoActionPerformed
        if(theCore != null) {
        	if(this.GrdLvl <= 2){
            	sloWindow = new SlomoWindow(this,true,2,10,10,stacks);
            } else if(this.GrdLvl > 2 && this.GrdLvl <= 5){
            	sloWindow = new SlomoWindow(this,true,optMenu.getPlayers(),optMenu.getWid(),optMenu.getLeng(),stacks);
            } else if(this.GrdLvl > 5 && this.GrdLvl <= 8){
            	sloWindow = new SlomoWindow(this,true,g68OptMenu.getPlayers(),g68OptMenu.getWid(),g68OptMenu.getLeng(),stacks);
            }
            sloWindow.setVisible(true);
        } else {
        	JOptionPane.showInternalMessageDialog(sloWindow, "Start a Simulation first to see a replay", "Error", JOptionPane.INFORMATION_MESSAGE, UIManager.getIcon("OptionPane.informationIcon"));
        }
    	
    }//GEN-LAST:event_SlomoActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        this.dispose();
        Main.callMain();
    }//GEN-LAST:event_ResetActionPerformed

    private void StopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopActionPerformed
        if(theCore != null){
            theCore.stop();
        }
    }//GEN-LAST:event_StopActionPerformed

    private void GenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateActionPerformed
    	//Special Thanks to DUDSS#2865 On Discord for helping me understand the generation and painting of the graphics!!
    	SimWindow.invalidate();
        if(this.GrdLvl > 2 && this.GrdLvl <= 5){
            SimWindow.setRowCount(optMenu.getWid());
            SimWindow.setColumnCount(optMenu.getLeng());
            SimWindow.generateGrid();
            if(optMenu.getPlayers() == 2) {
            	SimWindow.modifyTileImg(0, 0);
            	char1 = SimWindow.getCharacter(0, 0);
            	SimWindow.modifyTileImg(optMenu.getWid()-1, optMenu.getLeng()-1);
            	char2 = SimWindow.getCharacter(optMenu.getWid()-1, optMenu.getLeng()-1);
            	System.out.println("Generate button characters");
            } else if(optMenu.getPlayers() == 3) {
            	SimWindow.modifyTileImg(0, 0);
            	char1 = SimWindow.getCharacter(0, 0);
            	SimWindow.modifyTileImg(optMenu.getWid()-1, optMenu.getLeng()-1);
            	char2 = SimWindow.getCharacter(optMenu.getWid()-1, optMenu.getLeng()-1);
            	SimWindow.modifyTileImg(0, optMenu.getLeng()-1);
            	char3 = SimWindow.getCharacter(0, optMenu.getLeng()-1);
            	System.out.println("Generate button characters");
            } else if(optMenu.getPlayers() == 4) {
            	SimWindow.modifyTileImg(0, 0);
            	char1 = SimWindow.getCharacter(0, 0);
            	SimWindow.modifyTileImg(optMenu.getWid()-1, optMenu.getLeng()-1);
            	char2 = SimWindow.getCharacter(optMenu.getWid()-1, optMenu.getLeng()-1);
            	SimWindow.modifyTileImg(0, optMenu.getLeng()-1);
            	char3 = SimWindow.getCharacter(0, optMenu.getLeng()-1);
            	SimWindow.modifyTileImg(optMenu.getWid()-1, 0);
            	char4 = SimWindow.getCharacter(optMenu.getWid()-1, 0);
            	System.out.println("Generate button characters");
            }
        } else if(this.GrdLvl > 5 && this.GrdLvl <= 8){
            SimWindow.setRowCount(g68OptMenu.getWid());
            SimWindow.setColumnCount(g68OptMenu.getLeng());
            SimWindow.generateGrid();
            if(g68OptMenu.getPlayers() == 2) {
            	SimWindow.modifyTileImg(0, 0);
            	char1 = SimWindow.getCharacter(0, 0);
            	SimWindow.modifyTileImg(g68OptMenu.getWid()-1, g68OptMenu.getLeng()-1);
            	char2 = SimWindow.getCharacter(g68OptMenu.getWid()-1, g68OptMenu.getLeng()-1);
            	System.out.println("Generate button characters");
            } else if(g68OptMenu.getPlayers() == 3) {
            	SimWindow.modifyTileImg(0, 0);
            	char1 = SimWindow.getCharacter(0, 0);
            	SimWindow.modifyTileImg(g68OptMenu.getWid()-1, g68OptMenu.getLeng()-1);
            	char2 = SimWindow.getCharacter(g68OptMenu.getWid()-1, g68OptMenu.getLeng()-1);
            	SimWindow.modifyTileImg(0, g68OptMenu.getLeng()-1);
            	char3 = SimWindow.getCharacter(0, optMenu.getLeng()-1);
            	System.out.println("Generate button characters");
            } else if(g68OptMenu.getPlayers() == 4) {
            	SimWindow.modifyTileImg(0, 0);
            	char1 = SimWindow.getCharacter(0, 0);
            	SimWindow.modifyTileImg(g68OptMenu.getWid()-1, g68OptMenu.getLeng()-1);
            	char2 = SimWindow.getCharacter(g68OptMenu.getWid()-1, g68OptMenu.getLeng()-1);
            	SimWindow.modifyTileImg(0, g68OptMenu.getLeng()-1);
            	char3 = SimWindow.getCharacter(0, g68OptMenu.getLeng()-1);
            	SimWindow.modifyTileImg(g68OptMenu.getWid()-1, 0);
            	char4 = SimWindow.getCharacter(g68OptMenu.getWid()-1, 0);
            	System.out.println("Generate button characters");
            }
        } else if(this.GrdLvl <= 2) {
            SimWindow.setRowCount(Woods.MAX_HEIGHT);
            SimWindow.setColumnCount(Woods.MAX_WIDTH);
            SimWindow.generateGrid();
        	SimWindow.modifyTileImg(0, 0);
        	char1 = SimWindow.getCharacter(0, 0);
        	SimWindow.modifyTileImg(Woods.MAX_HEIGHT,Woods.MAX_WIDTH);
        	char2 = SimWindow.getCharacter(Woods.MAX_HEIGHT, Woods.MAX_WIDTH);
        }
    }//GEN-LAST:event_GenerateActionPerformed
    public void setParams(K2OptionMenu opt){
        this.k2OptMenu = opt;
    }
    public void setParams(OptionMenu opt){
        this.optMenu = opt;
    }
    public void setParams(G68OptionMenu opt){
        this.g68OptMenu = opt;
    }
    public void setGrdLvl(int grade){
        this.GrdLvl = grade;
    }
    public String valueOutput(OptionMenu opt){
        return "From GUI CLass - Players: "+opt.getPlayers()+" Length: "+opt.getLeng()+" Width: "+opt.getWid()+" Times to run: "+opt.getTimes();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GUI().setVisible(false);
            }
        });
    }
    private Image char1 = null;
    private Image char2 = null;
    private Image char3 = null;
    private Image char4 = null;
    private ReplayStacks stacks;
    private SlomoWindow sloWindow;
    private int SimWidth = 2, SimLength = 2;
    private Core theCore;
    private int GrdLvl;
    private K2OptionMenu k2OptMenu;
    private OptionMenu optMenu;
    private G68OptionMenu g68OptMenu;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ButtonPanel;
    private javax.swing.JButton Generate;
    private javax.swing.JButton Reset;
    private Simulation SimWindow;
    private javax.swing.JButton Slomo;
    private javax.swing.JButton Start;
    private javax.swing.JButton Stop;
    // End of variables declaration//GEN-END:variables
}
