
import javax.swing.GroupLayout.Alignment;

import java.time.Duration;
import java.time.Instant;

import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author edward
 */
public class SlomoWindow extends javax.swing.JDialog {

    /**
	 * 
	 */
    private int whichFrame = 1;
    private javax.swing.JButton Backward;
    private javax.swing.JPanel ButtonPanel;
    private javax.swing.JButton Forward;
    private javax.swing.JLabel FrameBar;
    private javax.swing.JLabel FrameNum;
    private javax.swing.JPanel FramePanel;
    private javax.swing.JSlider sFrameBar;
    private javax.swing.JTextField tFrameNum;
    private static ReplayStacks stacks;
    private static int PlayerCount;
	private static int x;
	private static int y;
    private int playPause = 0;
    private Simulation SimWin;
	private static final long serialVersionUID = -6419726379177627758L;
	/**
     * Creates new form SlomoWindow
     */
    @SuppressWarnings("static-access")
	public SlomoWindow(javax.swing.JFrame parent, boolean modal, int players, int row, int column, ReplayStacks stack) {
        super(parent, modal);
        this.PlayerCount = players;
        this.x = row;
        this.y = column;
        this.stacks = stack;
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ButtonPanel = new javax.swing.JPanel();
        Forward = new javax.swing.JButton();
        Backward = new javax.swing.JButton();
        FramePanel = new javax.swing.JPanel();
        sFrameBar = new javax.swing.JSlider();
        FrameBar = new javax.swing.JLabel();
        tFrameNum = new javax.swing.JTextField();
        tFrameNum.setEditable(false);
        FrameNum = new javax.swing.JLabel();
        SimWin = new Simulation(x,y);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Slo-mo Window");
        setResizable(false);

        Forward.setText("Forward");
        Forward.setToolTipText("Go forward in the simulation");
        Forward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForwardActionPerformed(evt);
            }
        });

        Backward.setText("Backward");
        Backward.setToolTipText("Go backward in the simulation");
        Backward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackwardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ButtonPanelLayout = new javax.swing.GroupLayout(ButtonPanel);
        ButtonPanelLayout.setHorizontalGroup(
        	ButtonPanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(ButtonPanelLayout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(ButtonPanelLayout.createParallelGroup(Alignment.LEADING)
        				.addComponent(Backward, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addComponent(Forward, GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
        			.addContainerGap())
        );
        ButtonPanelLayout.setVerticalGroup(
        	ButtonPanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(Alignment.TRAILING, ButtonPanelLayout.createSequentialGroup()
        			.addGap(76)
        			.addComponent(Forward, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED, 356, Short.MAX_VALUE)
        			.addComponent(Backward, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
        			.addGap(79))
        );
        ButtonPanel.setLayout(ButtonPanelLayout);

        sFrameBar.setMinimum(1);
        sFrameBar.setMaximum(stacks.size(1));
        sFrameBar.setMajorTickSpacing(stacks.size(1)/3);
        //sFrameBar.setMinorTickSpacing(1);
        sFrameBar.setPaintLabels(true);
        sFrameBar.setPaintTicks(true);
        //sFrameBar.setSnapToTicks(true);
        sFrameBar.setValue(whichFrame);
        sFrameBar.setToolTipText("Slide to select which frame to view");

        sFrameBar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sFrameBarStateChanged(evt);
            }
        });

        FrameBar.setLabelFor(sFrameBar);
        FrameBar.setText("Frame Bar");

        tFrameNum.setText(String.valueOf(whichFrame));
        tFrameNum.setToolTipText("Current frame being displayed");
        tFrameNum.setDragEnabled(false);

        FrameNum.setText("Frame");

        FramePanel.setPreferredSize(new java.awt.Dimension(1192, 600));
        FramePanel.setSize(new java.awt.Dimension(1192, 600));

        javax.swing.GroupLayout FramePanelLayout = new javax.swing.GroupLayout(FramePanel);
        FramePanelLayout.setHorizontalGroup(
        	FramePanelLayout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(FramePanelLayout.createSequentialGroup()
        			.addGroup(FramePanelLayout.createParallelGroup(Alignment.LEADING)
        				.addGroup(FramePanelLayout.createSequentialGroup()
        					.addGap(590)
        					.addComponent(FrameBar))
        				.addGroup(FramePanelLayout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(sFrameBar, GroupLayout.PREFERRED_SIZE, 1272, GroupLayout.PREFERRED_SIZE)))
        			.addGap(16)
        			.addGroup(FramePanelLayout.createParallelGroup(Alignment.LEADING, false)
        				.addComponent(tFrameNum)
        				.addComponent(FrameNum, GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
        			.addContainerGap())
        );
        FramePanelLayout.setVerticalGroup(
        	FramePanelLayout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(FramePanelLayout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(FramePanelLayout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(FrameBar)
        				.addComponent(FrameNum, GroupLayout.PREFERRED_SIZE, 16, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(FramePanelLayout.createParallelGroup(Alignment.LEADING)
        				.addComponent(tFrameNum, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(sFrameBar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(14))
        );
        FramePanel.setLayout(FramePanelLayout);

        SimWin.setPreferredSize(new java.awt.Dimension(1192, 600));
        SimWin.setSize(new java.awt.Dimension(1192, 600));

        javax.swing.GroupLayout SimWinLayout = new javax.swing.GroupLayout(SimWin);
        SimWin.setLayout(SimWinLayout);
        SimWinLayout.setHorizontalGroup(
            SimWinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1025, Short.MAX_VALUE)
        );
        SimWinLayout.setVerticalGroup(
            SimWinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 539, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(SimWin, GroupLayout.DEFAULT_SIZE, 1350, Short.MAX_VALUE)
        				.addComponent(FramePanel, GroupLayout.DEFAULT_SIZE, 1350, Short.MAX_VALUE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(ButtonPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap())
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(ButtonPanel, GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(SimWin, GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(FramePanel, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE)))
        			.addContainerGap())
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForwardActionPerformed
       if(whichFrame+1 <= stacks.givePlayerStack(1).size()-1){
           whichFrame++;
           drawFrame();
           tFrameNum.setText(String.valueOf(whichFrame));
       }
    }//GEN-LAST:event_ForwardActionPerformed

    private void BackwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackwardActionPerformed
        if(whichFrame-1 >= 0) {
            whichFrame--;
            drawFrame();
            tFrameNum.setText(String.valueOf(whichFrame));
        }
    }//GEN-LAST:event_BackwardActionPerformed

    private void sFrameBarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sLengthStateChanged
        javax.swing.JSlider source = (javax.swing.JSlider) evt.getSource();

        if (!source.getValueIsAdjusting()) {
            this.whichFrame = (int) source.getValue();
            tFrameNum.setText(String.valueOf(whichFrame));
            drawFrame();
        } else {
            this.whichFrame = (int) source.getValue();
            tFrameNum.setText(String.valueOf(whichFrame));
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SlomoWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SlomoWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SlomoWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SlomoWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SlomoWindow dialog = new SlomoWindow(new javax.swing.JFrame(), true, PlayerCount, x, y, stacks);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    public void drawFrame(){
        	if(whichFrame == stacks.givePlayerStack(1).size()) {
        		if(PlayerCount == 2) {
        			SimWin.invalidate();
        			SimWin.generateGrid();
        			SimWin.modifyTileImg(stacks.givePlayerStack(1).get(whichFrame-1).x, stacks.givePlayerStack(1).get(whichFrame-1).y, stacks.givePlayerStack(1).get(whichFrame-2).x, stacks.givePlayerStack(1).get(whichFrame-2).y, stacks.getCharacter(1));
        			SimWin.modifyTileImg(stacks.givePlayerStack(2).get(whichFrame-1).x, stacks.givePlayerStack(2).get(whichFrame-1).y, stacks.givePlayerStack(2).get(whichFrame-2).x, stacks.givePlayerStack(2).get(whichFrame-2).y, stacks.getCharacter(2));
        			SimWin.repaint();
        		} else if(PlayerCount == 3) {
        			SimWin.invalidate();
        			SimWin.generateGrid();
        			SimWin.modifyTileImg(stacks.givePlayerStack(1).get(whichFrame-1).x, stacks.givePlayerStack(1).get(whichFrame-1).y, stacks.givePlayerStack(1).get(whichFrame-2).x, stacks.givePlayerStack(1).get(whichFrame-2).y, stacks.getCharacter(1));
        			SimWin.modifyTileImg(stacks.givePlayerStack(2).get(whichFrame-1).x, stacks.givePlayerStack(2).get(whichFrame-1).y, stacks.givePlayerStack(2).get(whichFrame-2).x, stacks.givePlayerStack(2).get(whichFrame-2).y, stacks.getCharacter(2));
        			SimWin.modifyTileImg(stacks.givePlayerStack(3).get(whichFrame-1).x, stacks.givePlayerStack(3).get(whichFrame-1).y, stacks.givePlayerStack(3).get(whichFrame-2).x, stacks.givePlayerStack(3).get(whichFrame-2).y, stacks.getCharacter(3));
        			SimWin.repaint();
        		} else if(PlayerCount == 4) {
        			SimWin.invalidate();
        			SimWin.generateGrid();
        			SimWin.modifyTileImg(stacks.givePlayerStack(1).get(whichFrame-1).x, stacks.givePlayerStack(1).get(whichFrame-1).y, stacks.givePlayerStack(1).get(whichFrame-2).x, stacks.givePlayerStack(1).get(whichFrame-2).y, stacks.getCharacter(1));
        			SimWin.modifyTileImg(stacks.givePlayerStack(2).get(whichFrame-1).x, stacks.givePlayerStack(2).get(whichFrame-1).y, stacks.givePlayerStack(2).get(whichFrame-2).x, stacks.givePlayerStack(2).get(whichFrame-2).y, stacks.getCharacter(2));
        			SimWin.modifyTileImg(stacks.givePlayerStack(3).get(whichFrame-1).x, stacks.givePlayerStack(3).get(whichFrame-1).y, stacks.givePlayerStack(3).get(whichFrame-2).x, stacks.givePlayerStack(3).get(whichFrame-2).y, stacks.getCharacter(3));
        			SimWin.modifyTileImg(stacks.givePlayerStack(4).get(whichFrame-1).x, stacks.givePlayerStack(4).get(whichFrame-1).y, stacks.givePlayerStack(4).get(whichFrame-2).x, stacks.givePlayerStack(4).get(whichFrame-2).y, stacks.getCharacter(4));
        			SimWin.repaint();
        		}
                
            } else if(whichFrame == 1){
    		    if(PlayerCount == 2) {
    			    SimWin.invalidate();
    			    SimWin.generateGrid();
    			    SimWin.modifyTileImg(stacks.givePlayerStack(1).get(whichFrame).x, stacks.givePlayerStack(1).get(whichFrame).y, stacks.givePlayerStack(1).get(whichFrame).x, stacks.givePlayerStack(1).get(whichFrame).y, stacks.getCharacter(1));
    			    SimWin.modifyTileImg(stacks.givePlayerStack(2).get(whichFrame).x, stacks.givePlayerStack(2).get(whichFrame).y, stacks.givePlayerStack(2).get(whichFrame).x, stacks.givePlayerStack(2).get(whichFrame).y, stacks.getCharacter(2));
    			    SimWin.repaint();
    		    } else if(PlayerCount == 3) {
    			    SimWin.invalidate();
    			    SimWin.generateGrid();
    			    SimWin.modifyTileImg(stacks.givePlayerStack(1).get(whichFrame).x, stacks.givePlayerStack(1).get(whichFrame).y, stacks.givePlayerStack(1).get(whichFrame).x, stacks.givePlayerStack(1).get(whichFrame).y, stacks.getCharacter(1));
    			    SimWin.modifyTileImg(stacks.givePlayerStack(2).get(whichFrame).x, stacks.givePlayerStack(2).get(whichFrame).y, stacks.givePlayerStack(2).get(whichFrame).x, stacks.givePlayerStack(2).get(whichFrame).y, stacks.getCharacter(2));
    			    SimWin.modifyTileImg(stacks.givePlayerStack(3).get(whichFrame).x, stacks.givePlayerStack(3).get(whichFrame).y, stacks.givePlayerStack(3).get(whichFrame).x, stacks.givePlayerStack(3).get(whichFrame).y, stacks.getCharacter(3));
    			    SimWin.repaint();
    		    } else if(PlayerCount == 4) {
    			    SimWin.invalidate();
    			    SimWin.generateGrid();
    			    SimWin.modifyTileImg(stacks.givePlayerStack(1).get(whichFrame).x, stacks.givePlayerStack(1).get(whichFrame).y, stacks.givePlayerStack(1).get(whichFrame).x, stacks.givePlayerStack(1).get(whichFrame).y, stacks.getCharacter(1));
    			    SimWin.modifyTileImg(stacks.givePlayerStack(2).get(whichFrame).x, stacks.givePlayerStack(2).get(whichFrame).y, stacks.givePlayerStack(2).get(whichFrame).x, stacks.givePlayerStack(2).get(whichFrame).y, stacks.getCharacter(2));
    			    SimWin.modifyTileImg(stacks.givePlayerStack(3).get(whichFrame).x, stacks.givePlayerStack(3).get(whichFrame).y, stacks.givePlayerStack(3).get(whichFrame).x, stacks.givePlayerStack(3).get(whichFrame).y, stacks.getCharacter(3));
    			    SimWin.modifyTileImg(stacks.givePlayerStack(4).get(whichFrame).x, stacks.givePlayerStack(4).get(whichFrame).y, stacks.givePlayerStack(4).get(whichFrame).x, stacks.givePlayerStack(4).get(whichFrame).y, stacks.getCharacter(4));
    			    SimWin.repaint();
    		    }
                SimWin.repaint();
            } else {
                if(PlayerCount == 2) {
    			    SimWin.invalidate();
    			    SimWin.generateGrid();
    			    SimWin.modifyTileImg(stacks.givePlayerStack(1).get(whichFrame).x, stacks.givePlayerStack(1).get(whichFrame).y, stacks.givePlayerStack(1).get(whichFrame-1).x, stacks.givePlayerStack(1).get(whichFrame-1).y, stacks.getCharacter(1));
    			    SimWin.modifyTileImg(stacks.givePlayerStack(2).get(whichFrame).x, stacks.givePlayerStack(2).get(whichFrame).y, stacks.givePlayerStack(2).get(whichFrame-1).x, stacks.givePlayerStack(2).get(whichFrame-1).y, stacks.getCharacter(2));
    			    SimWin.repaint();
    		    } else if(PlayerCount == 3) {
    			    SimWin.invalidate();
    			    SimWin.generateGrid();
    			    SimWin.modifyTileImg(stacks.givePlayerStack(1).get(whichFrame).x, stacks.givePlayerStack(1).get(whichFrame).y, stacks.givePlayerStack(1).get(whichFrame-1).x, stacks.givePlayerStack(1).get(whichFrame-1).y, stacks.getCharacter(1));
    			    SimWin.modifyTileImg(stacks.givePlayerStack(2).get(whichFrame).x, stacks.givePlayerStack(2).get(whichFrame).y, stacks.givePlayerStack(2).get(whichFrame-1).x, stacks.givePlayerStack(2).get(whichFrame-1).y, stacks.getCharacter(2));
    			    SimWin.modifyTileImg(stacks.givePlayerStack(3).get(whichFrame).x, stacks.givePlayerStack(3).get(whichFrame).y, stacks.givePlayerStack(3).get(whichFrame-1).x, stacks.givePlayerStack(3).get(whichFrame-1).y, stacks.getCharacter(3));
    			    SimWin.repaint();
    		    } else if(PlayerCount == 4) {
    			    SimWin.invalidate();
    			    SimWin.generateGrid();
    			    SimWin.modifyTileImg(stacks.givePlayerStack(1).get(whichFrame).x, stacks.givePlayerStack(1).get(whichFrame).y, stacks.givePlayerStack(1).get(whichFrame-1).x, stacks.givePlayerStack(1).get(whichFrame-1).y, stacks.getCharacter(1));
    			    SimWin.modifyTileImg(stacks.givePlayerStack(2).get(whichFrame).x, stacks.givePlayerStack(2).get(whichFrame).y, stacks.givePlayerStack(2).get(whichFrame-1).x, stacks.givePlayerStack(2).get(whichFrame-1).y, stacks.getCharacter(2));
    			    SimWin.modifyTileImg(stacks.givePlayerStack(3).get(whichFrame).x, stacks.givePlayerStack(3).get(whichFrame).y, stacks.givePlayerStack(3).get(whichFrame-1).x, stacks.givePlayerStack(3).get(whichFrame-1).y, stacks.getCharacter(3));
    			    SimWin.modifyTileImg(stacks.givePlayerStack(4).get(whichFrame).x, stacks.givePlayerStack(4).get(whichFrame).y, stacks.givePlayerStack(4).get(whichFrame-1).x, stacks.givePlayerStack(4).get(whichFrame-1).y, stacks.getCharacter(4));
    			    SimWin.repaint();
    		    }
                SimWin.repaint();
            }
    }
    public void pauseDraw(){
        long timeElapsed;
        Instant start = Instant.now();
        do{
            timeElapsed = start.toEpochMilli();
        }while((timeElapsed < 4000));
    }
}
